---
- name: Create Datadog agent config directory
  file:
    dest: /etc/datadog-agent
    state: directory

- name: Create main Datadog agent configuration file
  template:
    src: datadog.yaml.j2
    dest: /etc/datadog-agent/datadog.yaml
    owner: "{{ datadog_user }}"
    group: "{{ datadog_group }}"
  notify: restart datadog-agent

- name: Register all checks directories present in datadog
  find:
    paths: /etc/datadog-agent/conf.d/
    pattern: "*.d"
    file_type: directory
  register: datadog_conf_directories
  when: datadog_disable_untracked_checks

- name: Delete checks not present in datadog_tracked_checks
  file:
    path: "/etc/datadog-agent/conf.d/{{ item }}.d/conf.yaml"
    state: absent
  loop: "{{ datadog_conf_directories.files | map(attribute='path') | list | map('basename') | list | map('regex_replace', '^(.*).d$', '\\1') | list }}"
  when: datadog_disable_untracked_checks and item not in datadog_tracked_checks

- name: Ensure configuration directories are present for each Datadog check
  file:
    dest: "/etc/datadog-agent/conf.d/{{ item }}.d"
    state: directory
    owner: "{{ datadog_user }}"
    group: "{{ datadog_group }}"
  with_items: '{{ datadog_checks|list }}'

- name: Create a configuration file for each Datadog check
  template:
    src: checks.yaml.j2
    dest: "/etc/datadog-agent/conf.d/{{ item }}.d/conf.yaml"
    owner: "{{ datadog_user }}"
    group: "{{ datadog_group }}"
  with_items: "{{ datadog_checks|list }}"
  notify: restart datadog-agent

- name: Remove old configuration file for each Datadog check
  file:
    dest: "/etc/datadog-agent/conf.d/{{ item }}.yaml"
    state: absent
  with_items: "{{ datadog_checks|list }}"
  notify: restart datadog-agent

- name: Create trace agent configuration file
  template:
    src: datadog.conf.j2
    dest: /etc/datadog-agent/trace-agent.conf
    owner: "{{ datadog_user }}"
    group: "{{ datadog_group }}"
  notify: restart datadog-agent

- name: Create process agent configuration file
  template:
    src: datadog.conf.j2
    dest: /etc/datadog-agent/process-agent.conf
    owner: "{{ datadog_user }}"
    group: "{{ datadog_group }}"
  notify: restart datadog-agent

- name: Ensure datadog-agent is running
  service:
    name: datadog-agent
    state: started
    enabled: yes
  when: not datadog_skip_running_check and datadog_enabled and not ansible_check_mode

- name: Ensure datadog-agent is not running
  service:
    name: datadog-agent
    state: stopped
    enabled: no
  when: not datadog_skip_running_check and not datadog_enabled
