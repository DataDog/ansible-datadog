---
- name: Fail if the Datadog Agent version is not compatible with APM host injection
  fail:
    msg: APM Host Injection is not supported for this datadog-agent version.
  when: agent_datadog_agent_major_version | int < 7

- name: Fail if APM Host injection is not supported on this host
  fail:
    msg: APM Host Injection is not supported in this platform.
  when: ansible_facts.os_family not in ["Debian", "RedHat", "Rocky", "AlmaLinux"]

- name: Fail if APM Host injection type does not contain a supported value
  fail:
    msg: The provided value for datadog_apm_instrumentation_enabled is not valid. Valid values are "all", "host" and "docker"
  when: datadog_apm_instrumentation_enabled not in ["all", "host", "docker"]

- name: Default to list of packages rather than "all"
  set_fact:
    datadog_apm_instrumentation_libraries: ["java", "js", "dotnet", "python", "ruby"]
  when: datadog_apm_instrumentation_libraries == ["all"] or
    ((datadog_apm_instrumentation_enabled in ["docker", "host", "all"]) and (datadog_apm_instrumentation_libraries | length == 0))

- name: Check if docker daemon config dir exists
  stat:
    path: /etc/docker
  register: agent_docker_daemon_config_dir

- name: Fail if APM Host container injection requirements aren't met (Docker installed)
  fail:
    msg: >
      /etc/docker does not exist. Please ensure docker is installed or disable the
       datadog_apm_instrumentation_enabled="docker" flag.
  when: >-
    datadog_apm_instrumentation_enabled in ["all", "docker"]
    and (
      agent_docker_daemon_config_dir.stat.isdir is not defined
      or not agent_docker_daemon_config_dir.stat.isdir
    )

- name: Fail if datadog_manage_config is not enabled
  fail:
    msg: "APM Host Injection requires datadog_manage_config: true"
  when: not datadog_manage_config

- name: Set internal values for APM host injection datadog_config
  set_fact:
    agent_dd_apm_host_inject_config:
      apm_config:
        receiver_socket: /opt/datadog/apm/inject/run/apm.socket
      use_dogstatsd: true
      dogstatsd_socket: /opt/datadog/apm/inject/run/dsd.socket
  when: not datadog_installer_enabled

- name: Fail if provided config is not compatible with APM host injection
  fail:
    msg: |
      The provided config is not compatible with APM host injection. The expected config parameters to be included are:
      "{{ agent_dd_apm_host_inject_config | to_nice_yaml }}"
  when: item.condition and not datadog_installer_enabled
  loop:
    - condition: >-
        {{
        'use_dogstatsd' in agent_datadog_config
        and agent_datadog_config['use_dogstatsd'] != agent_dd_apm_host_inject_config['use_dogstatsd']
        }}
    - condition: >-
        {{
        'dogstatsd_socket' in agent_datadog_config
        and agent_datadog_config['dogstatsd_socket'] != agent_dd_apm_host_inject_config['dogstatsd_socket']
        }}
    - condition: >-
        {{
        'apm_config' in agent_datadog_config
        and 'receiver_socket' in agent_datadog_config['apm_config']
        and agent_datadog_config['apm_config']['receiver_socket'] != agent_dd_apm_host_inject_config['apm_config']['receiver_socket']
        }}

- name: Update datadog_config including config values needed for APM host injection
  set_fact:
    agent_datadog_config: "{{ agent_datadog_config | combine(agent_dd_apm_host_inject_config, list_merge='keep') }}"
  when: not datadog_installer_enabled

- name: Alert for deprecated injection variable
  fail:
    msg: >
      "'datadog_apm_instrumentation_languages' is deprecated. In the future, please use
      'datadog_apm_instrumentation_libraries' to set apm tracer languages and versions"
  failed_when: false
  when: datadog_apm_instrumentation_languages is defined

- name: Deprecation variable - datadog_apm_instrumentation_languages
  set_fact:
    datadog_apm_instrumentation_libraries: "{{ datadog_apm_instrumentation_languages }}"
  when: datadog_apm_instrumentation_libraries is undefined and
    datadog_apm_instrumentation_languages is defined

- name: Remove latest tag and append -1 when version number specified in pinned APM tracer libraries
  set_fact:
    pre_processed_datadog_apm_libraries: "{{ (pre_processed_datadog_apm_libraries | default([], true))
    + [(item | regex_replace('[:]latest', ''))
    + ('-1' if (item.split(':') | length > 1 and item.split(':')[1] != 'latest') else '')] }}"
  loop: "{{ datadog_apm_instrumentation_libraries }}"
  when: not ansible_check_mode
