---
- name: Create Datadog agent config directory
  file:
    dest: "{{ agent_dd_config_dir }}"
    state: directory
    mode: "0755"
    owner: "{{ agent_dd_user }}"
    group: "{{ agent_dd_group }}"
  when: datadog_manage_config

- name: Create main Datadog agent configuration file
  template:
    src: datadog.yaml.j2
    dest: "{{ agent_dd_config_dir }}/datadog.yaml"
    mode: "0640"
    owner: "{{ agent_dd_user }}"
    group: "{{ agent_dd_group }}"
  when: datadog_manage_config
  notify: "{{ agent_dd_notify_agent }}"

- name: Register all check configs present in datadog
  find:
    paths: "{{ agent_dd_config_dir }}/conf.d/"
    patterns:
      - "conf.yaml*"
    recurse: true
    depth: 2
    file_type: file
  register: agent_datadog_conf_paths
  when: datadog_manage_config and (datadog_disable_untracked_checks or datadog_disable_default_checks)

- name: Delete checks not present in agent_datadog_tracked_checks
  file:
    path: "{{ agent_dd_config_dir }}/conf.d/{{ item }}.d/conf.yaml"
    state: absent
  loop: >-
    {{
      agent_datadog_conf_paths.files | map(attribute='path') | select('match', '.*\/conf\.yaml$') | list
      | map('dirname') | map('basename') | list | map('regex_replace', '^(.*).d$', '\1') | list
    }}
  when: datadog_manage_config and datadog_disable_untracked_checks and item not in agent_datadog_tracked_checks
  notify: "{{ agent_dd_notify_agent }}"

- name: Delete all default checks
  file:
    path: "{{ agent_dd_config_dir }}/conf.d/{{ item }}.d/conf.yaml.default"
    state: absent
  loop: >-
    {{
      agent_datadog_conf_paths.files | map(attribute='path') | select('match', '.*\/conf\.yaml\.default$') | list
      | map('dirname') | map('basename') | list | map('regex_replace', '^(.*).d$', '\1') | list
    }}
  when: datadog_manage_config and datadog_disable_default_checks and item not in agent_datadog_tracked_checks
  notify: "{{ agent_dd_notify_agent }}"

- name: Delete all example checks
  file:
    path: "{{ agent_dd_config_dir }}/conf.d/{{ item }}.d/conf.yaml.example"
    state: absent
  loop: >-
    {{
      agent_datadog_conf_paths.files | map(attribute='path') | select('match', '.*\/conf\.yaml\.example$') | list
      | map('dirname') | map('basename') | list | map('regex_replace', '^(.*).d$', '\1') | list
    }}
  when: datadog_manage_config and datadog_disable_example_checks and item not in agent_datadog_tracked_checks
  notify: "{{ agent_dd_notify_agent }}"

- name: Ensure configuration directories are present for each Datadog check
  file:
    dest: "{{ agent_dd_config_dir }}/conf.d/{{ item }}.d"
    state: directory
    owner: "{{ agent_dd_user }}"
    group: "{{ agent_dd_group }}"
    mode: "0755"
  with_items: "{{ agent_datadog_checks | list }}"
  when: datadog_manage_config

- name: Create a configuration file for each Datadog check
  template:
    src: checks.yaml.j2
    dest: "{{ agent_dd_config_dir }}/conf.d/{{ item }}.d/conf.yaml"
    mode: "0640"
    owner: "{{ agent_dd_user }}"
    group: "{{ agent_dd_group }}"
  with_items: "{{ agent_datadog_checks | list }}"
  when: datadog_manage_config
  notify: "{{ agent_dd_notify_agent }}"

- name: Remove old configuration file for each Datadog check
  file:
    dest: "{{ agent_dd_config_dir }}/conf.d/{{ item }}.yaml"
    state: absent
  with_items: "{{ agent_datadog_checks | list }}"
  when: datadog_manage_config
  notify: "{{ agent_dd_notify_agent }}"

- name: Create custom check file for each custom check
  copy:
    src: "{{ datadog_custom_checks[item] }}"
    dest: "{{ agent_dd_config_dir }}/checks.d/{{ item }}.py"
    mode: "0755"
    owner: "{{ agent_dd_user }}"
    group: "{{ agent_dd_group }}"
  with_items: "{{ datadog_custom_checks | list }}"
  notify: "{{ agent_dd_notify_agent }}"

- name: Create installation information file
  template:
    src: install_info.j2
    dest: "{{ agent_dd_config_dir }}/install_info"
    owner: "{{ agent_dd_user }}"
    group: "{{ agent_dd_group }}"
    mode: "0644"

- name: Check if install.json exists
  stat:
    path: "{{ agent_dd_config_dir }}/install.json"
  register: install_file

- name: Read remote install.json
  register: install_json_value
  slurp:
    src: "{{ agent_dd_config_dir }}/install.json"
  when: install_file.stat.exists

- name: Debug print install.json content
  debug:
    msg: "install.json content : {{ install_json_value.content }}"
  when: install_file.stat.exists

- name: Parse install.json file if it exists
  set_fact:
    install_info: "{{ install_json_value.content | b64decode | from_json }}"
  when: install_file.stat.exists

- name: Generate uuid
  when: not install_file.stat.exists
  check_mode: false
  block:
    - name: Generate uuid based on /proc/sys/kernel/random/uuid
      command: cat /proc/sys/kernel/random/uuid
      register: uuid_cmd
      changed_when: false

  rescue:
    - name: Generate uuid using uuidgen
      command: uuidgen
      register: uuid_cmd
      changed_when: false

- name: Set install signature from file if it exists
  set_fact:
    install_signature:
      install_id: "{{ install_info.install_id }}"
      install_time: "{{ install_info.install_time }}"
  when: install_file.stat.exists

- name: Generate install signature
  set_fact:
    install_signature:
      install_id: "{{ uuid_cmd.stdout }}"
      install_time: "{{ ansible_date_time.epoch }}"
  when: not install_file.stat.exists

- name: Create installation json file
  template:
    src: install.json.j2
    dest: "{{ agent_dd_config_dir }}/install.json"
    owner: "{{ agent_dd_user }}"
    group: "{{ agent_dd_group }}"
    mode: "0644"
