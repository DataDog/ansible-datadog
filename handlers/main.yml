---
- name: restart datadog-agent-sysprobe # noqa name[casing]
  service:
    name: datadog-agent-sysprobe
    state: restarted
  when: datadog_enabled and agent_datadog_sysprobe_enabled and not ansible_check_mode and
    not ansible_facts.os_family == "Windows" and not ansible_facts.os_family == "Darwin"

- name: restart datadog-agent # noqa name[casing]
  service:
    name: datadog-agent
    state: restarted
  when: datadog_enabled and not ansible_check_mode and not ansible_facts.os_family == "Windows" and not ansible_facts.os_family == "Darwin"

# We can't add the Windows Agent service restart handler directly here because that makes the role require
# the ansible.windows collection on all platforms. We only want it to be needed on Windows.
# Therefore, what we do is the following: when needed, our Windows tasks call this handler to require a
# Windows Agent restart (through notify: restart datadog-agent-win).
# When notified, the below handler is executed at the end of the playbook run.
# The include_tasks loads the handlers/main-win.yml file, which contains the real service restart task
# (which depends on ansible.windows), and runs it, triggering the Windows Agent restart.
- name: restart datadog-agent-win # noqa name[casing]
  include_tasks: handlers/main-win.yml

# When needed, our macOS tasks call this handler to require a
# macOS Agent restart (through notify: restart datadog-agent-macos).
# When notified, the below handler is executed at the end of the playbook run.
# The include_tasks loads the handlers/main-macos.yml file, which contains the real service restart task
# and runs it, triggering the macOS Agent restart.
- name: restart datadog-agent-macos # noqa name[casing]
  include_tasks: handlers/main-macos.yml
